<launch>
  <arg name="land_marker_size" value="0.54"/>
  <arg name="bot_marker_size" value="0.19"/>
  <arg name="camera_name" value="t265"/>

  <!-- ROS driver for Realsense T265 -->
  <include file="$(find realsense2_camera)/launch/rs_t265.launch">
    <!-- NOTE: fisheye streams must be enabled or disabled both. -->
    <arg name="enable_fisheye1" value="true"/>
    <arg name="enable_fisheye2" value="true"/>
    <arg name="camera" value="$(arg camera_name)"/>
  </include>

  <group ns="$(arg camera_name)"> <!-- NOTE: same group as in the realsense launch file -->

    <!-- undistort fisheye images obtained from the Realsense T265 camera (realsense-ros) -->
    <node pkg="vision_to_mavros" name="t265_fisheye_undistort"
          type="t265_single_undistort_node"><!--launch-prefix="gdbserver localhost:4567">-->
      <param name="param_file_path" value="$(find vision_to_mavros)/cfg/t265.yaml"/>

      <!-- in -->
      <remap from="/camera/fisheye1/image_raw" to="fisheye1/image_raw"/>
      <!-- out -->
      <remap from="/camera/fisheye1/rect/camera_info" to="fisheye1/rect/camera_info"/>
      <remap from="/camera/fisheye1/rect/image" to="fisheye1/rect/image"/>
    </node>

    <!-- Aruco detection -->
    <node pkg="nodelet" type="nodelet" name="aruco_detector"
          args="load percro_drone_contest_perception/ArucoDetectionNodelet realsense2_camera_manager" output="screen">
      <param name="land_marker_size" type="double" value="$(arg land_marker_size)"/>
      <param name="bot_marker_size" type="double" value="$(arg bot_marker_size)"/>

      <param name="mask_file" type="string" value="$(find percro_drone_contest_perception)/config/aruco_mask_config.yaml"/>
      <param name="image_transport" type="string" value="raw"/>

      <!-- in -->
      <remap from="/camera/camera_info" to="fisheye1/rect/camera_info"/>
      <remap from="/camera/image_raw" to="fisheye1/rect/image"/>
    </node>

    <!-- frame conversion from vision pose (tf) to mavros pose -->
    <node pkg="vision_to_mavros" type="vision_to_mavros_node" name="t265_to_mavros" output="screen">
      <remap from="/t265_to_mavros/vision_pose" to="/mavros/vision_pose/pose"/>
      <param name="source_frame_id" value="t265_pose_frame"/>
      <param name="target_frame_id" value="t265_odom_frame"/>
      <param name="output_rate" value="30"/>

      <!-- Two steps alignment:
        1) r,p,y: align current camera frame with default camera frame (x forward, y left, z up)
        2) gamma: align default camera frame's x-axis with world y-axis
        Front-facing examples:
            Forward, USB port to the right (default): r = 0,          p = 0,          y = 0,  gamma = -1.5707963
            Forward, USB port to the left           : r = 3.1415926,  p = 0,          y = 0,  gamma = -1.5707963
        Down-facing: you need to tilt the vehicle's nose up a little (not flat) when launch the T265 realsense-ros node,
        otherwise the initial yaw will be randomized. Fixed in T265 firmware 0.2.0.951.
        Ref: https://github.com/IntelRealSense/librealsense/issues/4080
            Down-facing, USB port to the right :       r = 0,          p = -1.5707963, y = 0,  gamma = -1.5707963
            Down-facing, USB port to the left  :       r = 3.1415926,  p = -1.5707963, y = 0,  gamma = -1.5707963
            Down-facing, USB port to the back  :       r = -1.5707963, p = -1.5707963, y = 0,  gamma = 1.5707963
            Down-facing, USB port to the front :       r = 1.5707963,  p = -1.5707963, y = 0,  gamma = -1.5707963
      -->
      <param name="roll_cam" value="0"/>
      <param name="pitch_cam" value="-1.5707963"/>
      <param name="yaw_cam" value="0"/>
      <param name="gamma_world" value="-1.5707963"/>
    </node>
  </group>
</launch>